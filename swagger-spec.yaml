swagger: '2.0'
info:
  description: A API driven product management system to facilitate easy retrieval of relevant items, updation of product tags, price etc.
  version: 0.0.6
  title: Product Management System
  contact:
    email: harshseth2006@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:3000'
basePath: /
tags:
  - name: Category Details
    description: Add, Modify and Remove Categories
  - name: Product Details
    description: Add, Modify and Remove Products
  - name: Search
    description: Search the catalog for categories and products via relevant queries 
  - name: Utils
    description: Get, set, calculate and more operations
  - name: Misc
    description: Endpoints with no functional significance, but lots of semantic significance
schemes:
  - http
produces:
  - "application/json"
paths:
  /:
    get:
      tags:
        - Misc
      summary: Get a list of valid endpoints
      description: An aid to fetch a list of all accessible endpoints
      operationId: GetEndPointList
      responses:
        '200': 
          description: List of all endpoints
          schema:
            type: object
            properties:
              listOfEndpoints:
                type: array
                items:
                  type: string
  /swagger:
    get:
      tags:
        - Misc
      summary: Get a copy of this swagger spec sheet
      description: Download a copy of this spec sheet to load it in a viewer for your development convenience
      operationId: GetSwaggerSpecs
      produces: 
        - text/yaml
      responses:
        '200':
          description: Returns .yaml Swagger spec sheet
          schema:
            type: file
  /category:
    post:
      tags:
        - Category Details
      summary: Add a new category
      description: Add a new category of products to database
      operationId: CreateCategory
      parameters:
        - name: body
          in: body
          description: Details of the new category
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Category was added successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: An error while creating new category
          schema:
            $ref: '#/definitions/MessageResponse'
    put:
      tags:
        - Category Details
      summary: Update an existing category
      description: Request body must contain the category ID and the details to be updated. To remove parent from a category, set parentCategoryID to -1
      operationId: UpdateCategory
      parameters:
        - name: body
          in: body
          description: Details of the category to be updated
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Category was updated successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '404':
          description: No such category exists with the provided category ID
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: An error occured with updating the category
          schema:
            $ref: '#/definitions/MessageResponse'
  /category/{categoryID}:
    get:
      tags:
        - Category Details
      summary: Get the details of a category
      description: Fetch all the details of a category
      operationId: GetCategory
      parameters:
        - name: categoryID
          in: path
          description: Unique ID of the requested category
          required: true
          type: integer
      responses:
        '200':
          description: Returns a JSON object with details of a category
          schema:
            $ref: '#/definitions/Category'
        '404':
          description: No such category exists with the provided category ID
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: A valid category ID was not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
    delete:
      tags:
        - Category Details
      summary: Delete an existing category and all its subcategories
      description: Remove a category, all subcategories of the category and the products associated to them
      operationId: DeleteCategory
      parameters:
        - name: categoryID
          in: path
          description: Unique ID of the category to be deleted
          required: true
          type: integer
      responses:
        '200':
          description: Successfully deleted the category and all of its children
          schema:
            $ref: '#/definitions/MessageResponse'
        '404':
          description: No such category exists with the provided category ID
          schema:
            $ref: '#/definitions/MessageResponse'
    post:
      tags: 
        - Category Details
      summary: Add a new category via a form
      description: Add a new category to the database via a form
      operationId: CreateCategoryForm
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: categoryID
          in: path
          description: Unique ID for the Category
          required: true
          type: integer
        - name: name
          in: formData
          description: Name of the Category
          required: true
          type: string
        - name: parentCategoryID
          in: formData
          description: Category ID of its parent category. Leave blank for no parent
          type: integer
      responses:
        '200':
          description: Category was added successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: An error while creating new category
          schema:
            $ref: '#/definitions/MessageResponse'
  /product:
    post:
      tags:
        - Product Details
      summary: Add a new product
      description: Add a new product to database
      operationId: CreateProduct
      parameters:
        - name: body
          in: body
          description: Details of the new product
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Product was added successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: An error while creating new product
          schema:
            $ref: '#/definitions/MessageResponse'
    put:
      tags:
        - Product Details
      summary: Update an existing product
      description: Request body must contain the product ID and the details to be updated
      operationId: UpdateProduct
      parameters:
        - name: body
          in: body
          description: Details of the product to be updated
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Product was updated successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '404':
          description: No such product exists with the provided product ID
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: An error occured with updating the product
          schema:
            $ref: '#/definitions/MessageResponse'
  /product/{productSKU}:
    get:
      tags:
        - Product Details
      summary: Get the details of a product
      description: Fetch all the details of a product
      operationId: GetProduct
      parameters:
        - name: productSKU
          in: path
          description: SKU of the requested product
          required: true
          type: string
      responses:
        '200':
          description: Returns a JSON object with details of a product
          schema:
            $ref: '#/definitions/Product'
        '404':
          description: Product SKU requested does not exist
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: A valid product ID was not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
    delete:
      tags:
        - Product Details
      summary: Delete an existing product
      description: Delete an existing product
      operationId: DeleteProduct
      parameters:
        - name: productSKU
          in: path
          description: Unique ID of the product to be deleted
          required: true
          type: string
      responses:
        '200':
          description: Successfully deleted the product and all of its children
          schema:
            $ref: '#/definitions/MessageResponse'
        '404':
          description: No such product exists with the provided product ID
          schema:
            $ref: '#/definitions/MessageResponse'
    post:
      tags: 
        - Product Details
      summary: Add a new product via a form
      description: Add a new product to the database via a form
      operationId: CreateProductForm
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: productSKU
          in: path
          description: Unique ID for the Category
          required: true
          type: string
        - name: name
          in: formData
          description: Name of the Product
          required: true
          type: string
        - name: categoryID
          in: formData
          description: ID of the category product belongs to
          required: true
          type: integer
        - name: keywords
          in: formData
          description: An array of keywords to facilitate searching 
          type: array
          items: 
            type: string
        - name: brand
          in: formData
          description: Name of the brand
          required: true
          type: string
        - name: color
          in: formData
          description: Color of the item
          type: string
        - name: modeOfSale
          in: formData
          description: Mode of the sales
          required: true
          type: string
          enum:
            - online
            - offline
            - both
        - name: basePrice
          in: formData
          description: Base selling price of the item
          required: true
          type: number
          minimum: 0
        - name: taxCategoryID
          in: formData
          description: Tax Category ID number for GST calculation
          required: true
          type: integer
        - name: imageURLs
          in: formData
          description: An array of URLs where the images of the product are hosted
          type: array
          items:
            type: string
        - name: stock
          in: formData
          description: The current number of items available in stock
          type: integer
          minimum: 0
        - name: status
          in: formData
          description: Current status of the product (if available for purchasing)
          type: string
          enum:
            - live
            - draft
      responses:
        '200':
          description: Product was added successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: An error while creating new product
          schema:
            $ref: '#/definitions/MessageResponse'
  /category/{categoryID}/getSubCategories:
    get:
      tags:
        - Search
      summary: Get sub categories of a category
      description: Get a list of all immediate child categories for a given category
      operationId: GetSubCategories
      parameters:
        - name: categoryID
          in: path
          description: Category ID of the parent category
          required: true
          type: integer
      responses:
        '200':
          description: Returns a list of all subcategories
          schema:
            type: object
            properties:
              subCategories:
                type: array
                items: 
                  $ref: '#/definitions/Category'
        '404':
          description: No such category exists with the provided category ID
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: A valid category ID was not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /category/{categoryID}/getProducts:
    get:
      tags:
        - Search
      summary: Get all products in a category
      description: Get a list of all products associated with a category
      operationId: GetProductsInCategory
      parameters:
        - name: categoryID
          in: path
          description: Category ID of the required category
          required: true
          type: integer
      responses:
        '200':
          description: Returns a list of all products in the category
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '404':
          description: No such category exists with the provided category ID
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: A valid category ID was not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /product/{productSKU}/getSimilar:
    get:
      tags:
        - Search
      summary: Get similar products
      description: Get a list of all products similar to the specified product
      operationId: GetSimilarProducts
      parameters:
        - name: productSKU
          in: path
          description: SKU of the query product
          required: true
          type: string
      responses:
        '200':
          description: Returns a list of all similar products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '404':
          description: No such product exists with the provided product SKU
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: A valid product SKU was not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /catalog/filterByKeyword/{keyword}:
    get:
      tags:
        - Search
      summary: Get products which match a keyword
      description: Get a list of all products which contain the query in their keywords
      operationId: GetProductsByKeyword
      parameters:
        - name: keyword
          in: path
          description: Keyword to look for in products
          required: true
          type: string
      responses:
        '200':
          description: Returns a list of matching products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /catalog/filterByKeyword:
    post:
      tags:
        - Search
      summary: Get products matching a list of keywords
      description: Get a list of all products which contain the queries in their keywords
      operationId: GetProductsByKeywords
      parameters:
        - in: body
          name: body
          description: Request body
          required: true
          schema:
            type: object
            properties:
              keywords:
                type: array
                items: 
                  type: string
      responses:
        '200':
          description: Returns a list of matching products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /catalog/filterByBrand/{brand}:
    get:
      tags:
        - Search
      summary: Get products belonging to a brand
      description: Get a list of all products which belong to a brand
      operationId: GetProductsByBrand
      parameters:
        - name: brand
          in: path
          description: Brand to look for
          required: true
          type: string
      responses:
        '200':
          description: Returns a list of matching products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /catalog/filterByBrand:
    post:
      tags:
        - Search
      summary: Get products from a list of brands
      description: Get a list of all products which belong to any brand in a list of brands
      operationId: GetProductsByBrands
      parameters:
        - in: body
          name: body
          description: Request body
          required: true
          schema:
            type: object
            properties:
              brands:
                type: array
                items: 
                  type: string
      responses:
        '200':
          description: Returns a list of matching products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /catalog/filterByColor/{color}:
    get:
      tags:
        - Search
      summary: Get products of a particular color
      description: Get a list of all products which is described to be of the specified color
      operationId: GetProductsByColor
      parameters:
        - name: color
          in: path
          description: Color of the product
          required: true
          type: string
      responses:
        '200':
          description: Returns a list of matching products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /catalog/filterByColor:
    post:
      tags:
        - Search
      summary: Get products of a color from a list of colors
      description: Get a list of all products which has a color from a list of colors
      operationId: GetProductsByColors
      parameters:
        - in: body
          name: body
          description: Request body
          schema:
            type: object
            properties:
              colors:
                type: array
                items: 
                  type: string
      responses:
        '200':
          description: Returns a list of matching products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /catalog/filterByMode/{mode}:
    get:
      tags:
        - Search
      summary: Get products sold in a particular mode
      description: Get a list of all products sold in the mode specified
      operationId: GetProductsByMode
      parameters:
        - name: mode
          in: path
          description: The mode of sales to filter by
          required: true
          enum:
            - online
            - offline
            - both
          type: string
      responses:
        '200':
          description: Returns a list of matching products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /catalog/filterByStatus/{status}:
    get:
      tags:
        - Search
      summary: Get products by status
      description: Get a list of all products in the queried status
      operationId: GetProductsByStatus
      parameters:
        - name: status
          in: path
          description: Product status
          required: true
          type: string
          enum:
            - live
            - draft
      responses:
        '200':
          description: Returns a list of matching products
          schema:
            type: object
            properties:
              products:
                type: array
                items: 
                  $ref: '#/definitions/Product'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /utils/taxRates:
    get:
      tags:
        - Utils
      summary: Get the current implemented tax rates
      description: Get a dictionary of tax category IDs and their corresponding tax rate
      operationId: GetTaxRates
      responses:
        '200':
          description: Returns the currently implemented tax categories and corresponding rates
          schema:
            type: object
            additionalProperties:
              type: number
    put:
      tags:
        - Utils
      summary: Change currently implemented tax rates
      description: Change the implemented tax rates by passing an object with key as tax category ID and value as new rate
      operationId: SetTaxRates
      parameters:
        - name: body
          in: body
          description: New tax rates
          required: true
          schema:
            type: object
            additionalProperties:
              type: number
      responses:
        '200':
          description: Tax rates were updated successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /utils/discounts:
    get:
      tags:
        - Utils
      summary: Get all active discounts on products
      description: Gets a dictionary of all discount rates on all products
      operationId: GetDiscounts
      responses:
        '200':
          description: Returns a dictionary of SKU values and discount rates
          schema:
            type: object
            additionalProperties:
              type: number
    put:
      tags:
        - Utils
      summary: Add or change a discount on a product
      description: Adds or changes a discount on a product referenced via its SKU
      operationId: AddDiscount
      parameters:
        - name: body
          in: body
          description: New Discount
          required: true
          schema:
            type: object
            properties:
              productSKU:
                type: string
              discountRate:
                type: number
      responses:
        '200':
          description: Discount was added successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
        '404': 
          description: No such product exists with the provided product SKU
          schema:
              $ref: '#/definitions/MessageResponse' 
  /utils/discounts/{productSKU}:
    delete:
      tags:
        - Utils
      summary: Remove discount from a product
      description: Remove any discount on a product, referenced by its SKU
      operationId: DeleteDiscount
      parameters:
        - name: productSKU
          in: path
          description: SKU of the product to remove discount from
          required: true
          type: string
      responses:
        '200':
          description: Discount was added successfully
          schema:
            $ref: '#/definitions/MessageResponse'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
        '404':
          description: No such product exists with the provided product SKU
          schema:
            $ref: '#/definitions/MessageResponse'
  /utils/calculateFinalPrice:
    post:
      tags:
        - Utils
      summary: Calculate final prices
      description: Calculate the final prices of products, factoring in discounts and taxes. It accepts a list of product SKUs and gives a breakdown of the price calculation
      operationId: CalculatePrices
      parameters:
        - name: body
          in: body
          required: true
          schema: 
            type: object
            properties:
              productSKUs:
                type: array
                items: 
                  type: string
      responses:
        '200': 
          description: Returns a dictionary of priceBreakdowns
          schema:
            type: object
            additionalProperties:
                $ref: '#/definitions/PriceBreakdown'
        '400':
          description: Valid parameters were not sent along with the request
          schema:
            $ref: '#/definitions/MessageResponse'
  /*:
    get:
      tags: 
        - Misc
      summary: Any invalid URL
      description: Any URL which doesn't match the above paths will be handled by this
      operationId: GetInvalidURL
      responses: 
        '404':
          description: Resource not found
          schema:
            $ref: "#/definitions/MessageResponse"
    post: 
      tags:
        - Misc
      summary: Any invalid URL
      description: Any URL which doesn't match the above paths will be handled by this
      operationId: PostInvalidURL
      responses:
        '404':
          description: Resource not found
          schema: 
            $ref: "#/definitions/MessageResponse"         
definitions:
  Product:
    type: object
    properties:
      productSKU:
        description: Unique Identifier for the Product
        type: string
        example: 23ab34c3
      name:
        description: Name of the Product
        type: string
        example: "Ballpoint Pen"
      categoryID:
        description: ID of the category product belongs to
        type: integer
        example: 2
      keywords:
        description: An array of keywords to facilitate searching 
        type: array
        items: 
          type: string
      brand:
        description: Name of the brand
        type: string
        example: "Qazwer Corp."
      color:
        description: Color of the item
        type: string
        example: "red"
      modeOfSale:
        description: Mode of the sales
        type: string
        example: online
        enum:
          - online
          - offline
          - both
      basePrice:
        description: Base selling price of the item
        type: number
        example: 42
        minimum: 0
      taxCategoryID:
        description: Tax Category ID number for GST calculation
        type: integer
        example: 1
      imageURLs:
        description: An array of URLs where the images of the product are hosted
        type: array
        items:
          type: string
      stock:
        description: The current number of items available in stock
        type: integer
        example: 200
        minimum: 0
      status:
        description: Current status of the product (if available for purchasing)
        type: string
        example: live
        enum:
          - live
          - draft
  Category:
    type: object
    properties:
      categoryID:
        description: Unique Identifier for the Category
        type: integer
        example: 1
      name:
        description: Name of the Category
        type: string
        example: "Writing Tools"
      parentCategoryID:
        description: Category ID of its parent category. Leave blank for no parent
        type: integer
  PriceBreakdown:
    type: object
    properties:
      basePrice:
        description: Base price of the product
        type: number
        example: 10
      discountRate:
        description: Discount rate applied on the product
        type: number
        example: 0.2
      taxableAmount:
        description: Price of the product, after discount but before applying tax
        type: number
        example: 8
      taxRate:
        description: Tax rate applied on the product
        type: number
        example: 0.1
      finalPrice:
        description: Final price of the product
        type: number
        example: 8.8
  MessageResponse:
    type: object
    properties:
      status:
        type: string
      message:
        type: string
